(function() {
    'use strict';
    

    //Variable declration for webRTC
    let rtcPeerConnection
    let upstream
    
    const offerOptions = {
        offerToReceiveAudio: 0,
        offerToReceiveVideo: 1
    }

    // Contains the stun server URL we will be using.
    // let iceServers = {
    //     iceServers: [
    //         { urls: "stun:stun.services.mozilla.com" },
    //         { urls: "stun:stun.l.google.com:19302" },
    //     ]
    // };
    
    //Initiating pusher
    var pusher = new Pusher('a60f02f7bde182f427ce', {
        authEndpoint: '/pusher/auth',
        cluster: 'ap2',
        encrypted: true
    });
    // Pusher.logToConsole = true

    

    // ----------------------------------------------------
    // Chat Details
    // ----------------------------------------------------

    let chat = {
        name:  undefined,
        email: undefined,
        myChannel: undefined,
    }

    // ----------------------------------------------------
    // vdo Details
    // ----------------------------------------------------


    //Get name and email of student
    const name  = $('#fullname').val().trim()
    const email = $('#email').val().trim().toLowerCase()

    //This will help admin to join to privatechannel 
    //So they can response to event generated by specific user 
    
    let vdoChannel = pusher.subscribe('private-'+email+"2550")
    vdoChannel.bind("pusher:subscription_succeeded", ()=>{
        axios.post('/new/vdoCall', {name, email}).then(response => {
            console.log('private channel by stu')
        })
    })
    vdoChannel.bind('client-admin-ready', (data)=>{
        console.log('i am hear')
        helpers.getMedia(data)
    })
    
    vdoChannel.bind('client-set-ans', (data)=>{
        console.log('setting answer')
        rtcPeerConnection.setRemoteDescription(data['answer'])
    })

    vdoChannel.bind('client-admin-ice', (data)=>{
        console.log('Setting admin ice')
        let iceCandidate = new RTCIceCandidate(data['candidate'])
        rtcPeerConnection.addIceCandidate(iceCandidate)
    })


    // ----------------------------------------------------
    // Targeted Elements
    // ----------------------------------------------------

    const chatPage   = $(document)
    const chatWindow = $('.chatbubble')
    const  startVdoBtn = $('#start-vdo')
    const chatHeader = chatWindow.find('.unexpanded')
    const chatBody   = chatWindow.find('.chat-window')


    // ----------------------------------------------------
    // Register helpers
    // ----------------------------------------------------

    let helpers = {

        getMedia : function(data){
            navigator.mediaDevices.getUserMedia({
                audio:false,
                video: true
            })
            .then((stream)=>{
                console.log('gotMedia')
                upstream = stream
                const uservdo = document.getElementById('my-vdo')
                console.log(uservdo)
                uservdo.srcObject = stream
                uservdo.addEventListener('loadedmetadata' , function(e){
                    uservdo.muted = true
                    uservdo.play()
                })
                helpers.CreateOffer(data)
            })
            .catch(err=>{
                console.log(err.name)
            })
        },

        // ----------------------------------------------------
        // Toggles the display of the chat window.
        // ----------------------------------------------------

        ToggleChatWindow: function () {
            chatWindow.toggleClass('opened')
            chatHeader.find('.title').text(
                chatWindow.hasClass('opened') ? 'Minimize Chat Window' : 'Chat with Support'
            )
        },

        // --------------------------------------------------------------------
        // Show the appropriate display screen. Login screen or Chat screen.
        // --------------------------------------------------------------------

        ShowAppropriateChatDisplay: function () {
            (chat.name) ? helpers.ShowChatRoomDisplay() : helpers.ShowChatInitiationDisplay()
        },

        // ----------------------------------------------------
        // Show the enter details form.
        // ----------------------------------------------------

        ShowChatInitiationDisplay: function () {
            chatBody.find('.chats').removeClass('active')
            chatBody.find('.login-screen').addClass('active')
        },

        // ----------------------------------------------------
        // Show the chat room messages display.
        // ----------------------------------------------------

        ShowChatRoomDisplay: function () {
            chatBody.find('.chats').addClass('active')
            chatBody.find('.login-screen').removeClass('active')

            setTimeout(function(){
                chatBody.find('.loader-wrapper').hide()
                chatBody.find('.input, .messages').show()
            }, 2000)
        },

        // ----------------------------------------------------
        // Append a message to the chat messages UI.
        // ----------------------------------------------------

        NewChatMessage: function (message) {
            if (message !== undefined) {
                const messageClass = message.sender !== chat.email ? 'support' : 'user'

                chatBody.find('ul.messages').append(
                    `<li class="clearfix message ${messageClass}">
                        <div class="sender">${message.name}</div>
                        <div class="message">${message.text}</div>
                    </li>`
                )


                chatBody.scrollTop(chatBody[0].scrollHeight)
            }
        },

        // ----------------------------------------------------
        // Send a message to the chat channel.
        // ----------------------------------------------------

        SendMessageToSupport: function (evt) {
            console.log('Heiii')
            evt.preventDefault()

            let createdAt = new Date()
            createdAt = createdAt.toLocaleString()

            const message = $('#newMessage').val().trim()
            console.log(message)

            chat.myChannel.trigger('client-guest-new-message', {
                'sender': chat.name,
                'email': chat.email,
                'text': message,
                'createdAt': createdAt 
            });

            helpers.NewChatMessage({
                'text': message,
                'name': chat.name,
                'sender': chat.email
            })

            console.log("Message added!")

            $('#newMessage').val('')
        },

        // ----------------------------------------------------
        // Logs user into a chat session.
        // ----------------------------------------------------

        LogIntoChatSession: function (evt) {
            const name  = $('#fullname').val().trim()
            const email = $('#email').val().trim().toLowerCase()

            // Disable the form
            chatBody.find('#loginScreenForm in6666666put, #loginScreenForm button').attr('disabled', true)

            if ((name !== '' && name.length >= 3) && (email !== '' && email.length >= 5)) {
                axios.post('/new/guest', {name, email}).then(response => {
                    chat.name = name
                    chat.email = email
                    chat.myChannel = pusher.subscribe('private-' + response.data.email);
                    helpers.ShowAppropriateChatDisplay()
                })
            } else {
                alert('Enter a valid name and email.')
            }

            evt.preventDefault()
        },

        CreateOffer: function (data){
            var verifiedName = name.replace(/ /g, '')
            console.log(verifiedName)
            axios.post('/getcredential', {'verifiedName':verifiedName})
            .then((response)=>{
                let iceServersTwo = {
                    iceServers : [
                        {
                            urls : "turn:161.97.79.224:3478?transport=tcp",
                            username: response.data.username,
                            credential: response.data.credential
                        }
                    ]
                }
                console.log('creating offer')
                rtcPeerConnection = new RTCPeerConnection(iceServersTwo)
                rtcPeerConnection.onicecandidate = (eve)=>{
                    helpers.OniceCandidateFunction(eve, data)
                }
                rtcPeerConnection.oniceconnectionstatechange = (eve)=>{
                    helpers.IceStateChgFun(eve,data)
                }
                rtcPeerConnection.addTrack(upstream.getTracks()[0], upstream)
                rtcPeerConnection.onconnectionstatechange = (eve)=>{
                    helpers.ConnectionStateChgFun(eve,data)
                }
                rtcPeerConnection.createOffer(offerOptions).then((offer)=>{
                    rtcPeerConnection.setLocalDescription(offer,
                        ()=>{
                            console.log('It was successfull')
                        },
                        (eve)=>{
                            console.log(eve)
                        }
                    )
                    vdoChannel.trigger('client-set-offer', {
                        'email':data.email,
                        'name': data.name,
                        'offer':offer
                    })
                })

                window.addEventListener('beforeunload', ()=>{
                    if(rtcPeerConnection){
                        rtcPeerConnection.close()
                        console.log("Closing Due to reload")
                    } 
                })
            })
            .catch((e)=>{
                console.log(e)
            })
        }, 

        OniceCandidateFunction: function(eve, data){
            
            if(eve.candidate != null){
                console.log('Candidate sent to admin')
                vdoChannel.trigger('client-stu-ice', {'candidate':eve.candidate, 'email':data.email})
            }
        },

        ConnectionStateChgFun: function(eve,data){
            console.log(rtcPeerConnection.connectionState)
            if(rtcPeerConnection.connectionState === "failed"){
                console.log("creating offer again")
                rtcPeerConnection.createOffer({...offerOptions, iceRestart: true})
                .then((offer)=>{
                    rtcPeerConnection.setLocalDescription(offer)
                    vdoChannel.trigger('client-set-offer', {
                        'email':data.email,
                        'offer':offer
                    })
                })
                .catch(err=>{
                    console.log(err)
                })

            }
        },

        IceStateChgFun: function(eve,data){
            console.log(rtcPeerConnection.iceConnectionState)
            if(rtcPeerConnection.iceConnectionState === "failed"){
                console.log("creating offer again")
                rtcPeerConnection.createOffer({...offerOptions, iceRestart: true})
                .then((offer)=>{
                    rtcPeerConnection.setLocalDescription(offer)
                    vdoChannel.trigger('client-set-offer', {
                        'email':data.email,
                        'offer':offer
                    })
                })
                .catch(err=>{
                    console.log(err)
                })

            }
        },

    }


    // ------------------------------------------------------------------
    // Listen for a new message event from the admin
    // ------------------------------------------------------------------

    pusher.bind('client-support-new-message', function(data){
        helpers.NewChatMessage(data)
    })




    // ----------------------------------------------------
    // Register page event listeners
    // ----------------------------------------------------

    chatPage.ready(helpers.ShowAppropriateChatDisplay)
    chatHeader.on('click', helpers.ToggleChatWindow)
    chatBody.find('#loginScreenForm').on('submit', helpers.LogIntoChatSession)
    chatBody.find('#messageSupport').on('submit', helpers.SendMessageToSupport)
}())
